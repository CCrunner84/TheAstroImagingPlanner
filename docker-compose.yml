version: '3'
services:
    planner_app:
        image: gshau/astroimaging-planner:${APP_VERSION}
        restart: always
        container_name: planner
        entrypoint: ["python", "./src/app.py"]
        ports:
            - "8050:8050"
        volumes:
            - ./conf:/app/conf
            - ${DATA_PATH}:/data:ro
            - ./logs:/logs
        environment:
            POSTGRES_USER: astro_user
            POSTGRES_PASSWORD: andromeda
            POSTGRES_DB: fits_files
            PGPORT: 5432
            PGHOST: db
            REDIS_HOST: redis
            LOGFILE: /logs/planner.log
        depends_on:
            - db
            - watchdog
            - mqtt
            - redis
    watchdog:
        image: gshau/astroimaging-planner:${APP_VERSION}
        restart: always
        container_name: watchdog
        entrypoint: ["python", "./src/watchdog.py"]
        volumes:
            - ./conf:/app/conf
            - ${DATA_PATH}:/data:ro
            - ${TARGETS_PATH}:/targets:ro
            - ./logs:/logs
        environment:
            POSTGRES_USER: astro_user
            POSTGRES_PASSWORD: andromeda
            POSTGRES_DB: fits_files
            PGPORT: 5432
            PGHOST: db
            REDIS_HOST: redis
            LOGFILE: /logs/watchdog.log
        depends_on:
            - db
            - mqtt
    db:
        image: postgres
        restart: always
        container_name: db
        ports:
            - "5432:5432"
        environment:
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_USER: astro_user
            POSTGRES_PASSWORD: andromeda
            POSTGRES_DB: fits_files
            PGPORT: 5432
        volumes:
            - pgdata:/var/lib/postgresql/data
        logging:
            options:
                max-size: 10m
                max-file: "3"                
    mqtt:
        image: toke/mosquitto
        container_name: mqtt
        restart: unless-stopped                                       
    redis:
        image: "redis:alpine"
        container_name: redis
        restart: unless-stopped    
volumes:
  pgdata:
    external: true            